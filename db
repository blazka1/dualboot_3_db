
CREATE TABLE employees_regions (
  id serial PRIMARY KEY,
  name varchar(255)
);

CREATE TABLE employees_locations (
  id serial PRIMARY KEY,
  address varchar(255),
  region_id integer,
  FOREIGN KEY (region_id) REFERENCES regions (id)
);


CREATE TABLE employees_employees (
  id serial PRIMARY KEY,
  name varchar(255) NOT NULL,
  last_name varchar(255) NOT NULL,
  hire_date date NOT NULL,
  salary integer NOT NULL,
  email varchar(255) UNIQUE NOT NULL,
  manager_id integer,
  department_id integer,
  FOREIGN KEY (manager_id) REFERENCES employees (id),
  FOREIGN KEY (department_id) REFERENCES departments (id) ON DELETE SET NULL
);


CREATE TABLE employees_departments (
  id serial PRIMARY KEY,
  name varchar(255),
  location_id integer,
  manager_id integer,
  FOREIGN KEY (location_id) REFERENCES locations (id),
  FOREIGN KEY (manager_id) REFERENCES employees (id)
);







# Показать работников у которых нет почты или почта не в корпоративном домене (домен dualbootpartners.com)
SELECT *
FROM employees_employee
WHERE email NOT LIKE '%dualbootpartners.com';


# Получить список работников нанятых в последние 30 дней
SELECT *
FROM employees_employee
WHERE hire_date >= CURRENT_DATE - INTERVAL '30 days';

# Найти максимальную и минимальную зарплату по каждому департаменту
SELECT
    department_id,
    MAX(salary) AS max_salary,
    MIN(salary) AS min_salary
FROM
    employees_employee
GROUP BY
    department_id;



# Посчитать количество работников в каждом регионе
SELECT
    r.id AS region_id,
    r.name AS region_name,
    COUNT(e.id) AS employee_count
FROM
    employees_region r
LEFT JOIN
    employees_location l ON r.id = l.region_id
LEFT JOIN
    employees_department d ON l.id = d.location_id
LEFT JOIN
    employees_employee e ON d.id = e.department_id
GROUP BY
    r.id, r.name;

# Показать сотрудников у которых фамилия длиннее 10 символов
SELECT *
FROM employees_employee
WHERE LENGTH(last_name) > 10;

# Показать сотрудников с зарплатой выше средней по всей компании
SELECT *
FROM employees_employee
WHERE salary > (SELECT AVG(salary) FROM employees_employee);




  
  
